/* Program : DA_INA_AD
 * DA mengeluarkan sinyal ramp dalam mV
 * INA dan AD mengukur
 * Print ke Serial Monitor dalam mV
 * (c) Eko M. Budi, 2022
 */

// pustaka
#include <Wire.h>
#include <Adafruit_INA219.h>

#define BAUD 500000

// Pin Standar kit ESCOPE 2020 ESP32
#define DO0 13
#define DO1 12
#define DO2 14
#define DO3 27
#define DO4 33

#define DI0 32
#define DI1 35
#define DI2 34
#define DI3 39
#define DI4 36

#define AO0 26
#define AO1 25

#define LED0 5
#define BT0 4
#define BT1 16
#define BT2 17

#define DA_MAX 255
#define AD_MAX 4095

// pesan obyek INA219
Adafruit_INA219 ina219;

// data
int da_out; 
int ad_in;

int ina_mv;
int da_mv;
int ad_mv;

// KONVERSI dgn Kalibrasi

// index kolom array kalibrasi
enum {I_AD, I_MV, I_DA, N_COL};
#define N_ROW 256

// isi tabel ini dari hasil program sebelumnya
int tabel[N_ROW][N_COL] = {
{   0,   60,    0},
{   1,   76,    1},
{   2,   84,    2},
{   3,   96,    3},
{  29,  108,    4},
{  22,  116,    5},
{  49,  132,    6},
{  64,  144,    7},
{  77,  156,    8},
{  91,  168,    9},
{ 112,  180,   10},
{ 120,  188,   11},
{ 137,  200,   12},
{ 151,  216,   13},
{ 172,  224,   14},
{ 179,  236,   15},
{ 192,  248,   16},
{ 209,  264,   17},
{ 226,  272,   18},
{ 244,  284,   19},
{ 252,  300,   20},
{ 272,  308,   21},
{ 276,  320,   22},
{ 302,  332,   23},
{ 307,  344,   24},
{ 333,  356,   25},
{ 336,  368,   26},
{ 358,  384,   27},
{ 374,  392,   28},
{ 385,  404,   29},
{ 400,  416,   30},
{ 422,  424,   31},
{ 442,  444,   32},
{ 453,  456,   33},
{ 474,  468,   34},
{ 486,  480,   35},
{ 496,  492,   36},
{ 526,  504,   37},
{ 544,  512,   38},
{ 553,  528,   39},
{ 562,  540,   40},
{ 580,  552,   41},
{ 593,  564,   42},
{ 610,  576,   43},
{ 619,  584,   44},
{ 634,  600,   45},
{ 651,  608,   46},
{ 669,  620,   47},
{ 688,  636,   48},
{ 739,  648,   49},
{ 715,  656,   50},
{ 731,  672,   51},
{ 749,  684,   52},
{ 758,  696,   53},
{ 768,  708,   54},
{ 789,  720,   55},
{ 800,  728,   56},
{ 821,  740,   57},
{ 829,  752,   58},
{ 839,  764,   59},
{ 869,  776,   60},
{ 873,  788,   61},
{ 885,  800,   62},
{ 911,  812,   63},
{ 921,  832,   64},
{ 948,  844,   65},
{ 962,  860,   66},
{ 978,  872,   67},
{ 991,  880,   68},
{1006,  896,   69},
{1021,  904,   70},
{1054,  920,   71},
{1055,  932,   72},
{1072,  940,   73},
{1092,  952,   74},
{1105,  964,   75},
{1121,  976,   76},
{1136,  988,   77},
{1150, 1000,   78},
{1167, 1008,   79},
{1177, 1024,   80},
{1194, 1036,   81},
{1214, 1044,   82},
{1225, 1060,   83},
{1217, 1068,   84},
{1258, 1084,   85},
{1264, 1096,   86},
{1291, 1108,   87},
{1296, 1120,   88},
{1317, 1132,   89},
{1327, 1144,   90},
{1345, 1156,   91},
{1360, 1168,   92},
{1379, 1176,   93},
{1392, 1188,   94},
{1409, 1200,   95},
{1425, 1224,   96},
{1447, 1232,   97},
{1456, 1240,   98},
{1473, 1256,   99},
{1488, 1268,  100},
{1503, 1280,  101},
{1514, 1292,  102},
{1532, 1300,  103},
{1552, 1312,  104},
{1568, 1328,  105},
{1581, 1340,  106},
{1600, 1348,  107},
{1617, 1360,  108},
{1632, 1372,  109},
{1654, 1388,  110},
{1658, 1396,  111},
{1678, 1412,  112},
{1690, 1420,  113},
{1706, 1432,  114},
{1723, 1444,  115},
{1742, 1460,  116},
{1744, 1468,  117},
{1768, 1480,  118},
{1787, 1492,  119},
{1788, 1504,  120},
{1805, 1516,  121},
{1825, 1528,  122},
{1835, 1540,  123},
{1853, 1552,  124},
{1872, 1564,  125},
{1883, 1576,  126},
{1902, 1588,  127},
{1901, 1588,  128},
{1919, 1600,  129},
{1933, 1612,  130},
{1945, 1624,  131},
{1958, 1640,  132},
{1973, 1648,  133},
{1994, 1660,  134},
{2003, 1672,  135},
{2020, 1680,  136},
{2032, 1692,  137},
{2059, 1708,  138},
{2062, 1720,  139},
{2085, 1732,  140},
{2105, 1740,  141},
{2113, 1756,  142},
{2126, 1764,  143},
{2141, 1780,  144},
{2160, 1792,  145},
{2176, 1800,  146},
{2182, 1812,  147},
{2205, 1824,  148},
{2223, 1836,  149},
{2240, 1852,  150},
{2254, 1864,  151},
{2263, 1876,  152},
{2282, 1888,  153},
{2295, 1900,  154},
{2307, 1908,  155},
{2323, 1924,  156},
{2336, 1932,  157},
{2357, 1944,  158},
{2369, 1960,  159},
{2390, 1976,  160},
{2405, 1984,  161},
{2416, 2000,  162},
{2432, 2012,  163},
{2448, 2023,  164},
{2459, 2032,  165},
{2480, 2048,  166},
{2493, 2060,  167},
{2505, 2068,  168},
{2519, 2080,  169},
{2540, 2092,  170},
{2545, 2104,  171},
{2575, 2116,  172},
{2585, 2128,  173},
{2601, 2140,  174},
{2621, 2152,  175},
{2627, 2164,  176},
{2650, 2180,  177},
{2659, 2192,  178},
{2674, 2200,  179},
{2701, 2212,  180},
{2706, 2228,  181},
{2721, 2236,  182},
{2737, 2248,  183},
{2751, 2256,  184},
{2767, 2272,  185},
{2785, 2284,  186},
{2798, 2292,  187},
{2815, 2308,  188},
{2832, 2316,  189},
{2843, 2332,  190},
{2862, 2340,  191},
{2880, 2364,  192},
{2897, 2376,  193},
{2919, 2388,  194},
{2935, 2400,  195},
{2946, 2412,  196},
{2969, 2424,  197},
{2975, 2436,  198},
{2999, 2444,  199},
{3008, 2456,  200},
{3009, 2468,  201},
{3042, 2484,  202},
{3054, 2496,  203},
{3082, 2504,  204},
{3102, 2516,  205},
{3120, 2528,  206},
{3126, 2540,  207},
{3143, 2552,  208},
{3160, 2564,  209},
{3173, 2576,  210},
{3197, 2588,  211},
{3213, 2600,  212},
{3233, 2612,  213},
{3251, 2624,  214},
{3261, 2636,  215},
{3280, 2648,  216},
{3300, 2660,  217},
{3334, 2672,  218},
{3329, 2684,  219},
{3348, 2692,  220},
{3371, 2708,  221},
{3393, 2720,  222},
{3411, 2728,  223},
{3435, 2748,  224},
{3465, 2764,  225},
{3478, 2772,  226},
{3495, 2788,  227},
{3513, 2800,  228},
{3536, 2812,  229},
{3555, 2820,  230},
{3581, 2832,  231},
{3606, 2844,  232},
{3633, 2856,  233},
{3653, 2868,  234},
{3664, 2880,  235},
{3701, 2892,  236},
{3728, 2900,  237},
{3753, 2916,  238},
{3776, 2924,  239},
{3798, 2940,  240},
{3824, 2952,  241},
{3842, 2964,  242},
{3874, 2976,  243},
{3896, 2988,  244},
{3921, 2996,  245},
{3949, 3012,  246},
{3982, 3024,  247},
{4005, 3032,  248},
{4039, 3048,  249},
{4040, 3056,  250},
{4043, 3060,  251},
{4048, 3056,  252},
{4050, 3064,  253},
{4052, 3060,  254},
{4055, 3052,  255},
};


// Fungsi konversi
int mvToDa(int mv) {
  // konversi linier
  int ofs_mv = tabel[0][I_MV];
  long delta_mv = tabel[N_ROW-1][I_MV]-ofs_mv;
  long delta_da = tabel[N_ROW-1][I_DA];

  // kalkulasi pakai float, bulatkan jadi int lagi
  int da = (int) ((float)(mv-ofs_mv)/delta_mv*delta_da);

  /* buat debug
  char buff[50];
  sprintf(buff,"%4d %6.2f %6.2f %4d", mv, delta_mv, delta_da, da);
  Serial.println(buff);
  */
  
  return constrain(da,0,DA_MAX);
}

// Fungsi konversi
int adToMv(int ad) {
  // cari segmen
  // berupa index pada tabel yang isi I_AD nya sudah > ad
  int idx;
  for (idx=1; idx<N_ROW-1; idx++) {
    if (tabel[idx][I_AD] >= ad) break;    
  }

  // ambil batas interpolasi dari tabel
  int ofs_ad = tabel[idx-1][I_AD];
  int ofs_mv = tabel[idx-1][I_MV];
  int delta_mv = (float)tabel[idx][I_MV]-ofs_mv;
  int delta_ad = (float)tabel[idx][I_AD]-ofs_ad;

  // interpolasi linier untuk konversi ke mV
  int mv = (int)((float)(ad-ofs_ad)*delta_mv/delta_ad+0.5)+ ofs_mv;   

  /* untuk debug
  char buff[60];
  sprintf(buff,"%4d %4d %4d %5.2f %5.2f %4d", ad, ofs_mv, ofs_ad, delta_mv, delta_ad, idx);
  Serial.println(buff);
  */
  return mv;
}

// Fungsi untuk print data ke serial monitor
void printData() {
  char buff[40];
  // format ke spreadsheet
  sprintf(buff,"%3d %5d  %6d  %5d", da_out, da_mv, ina_mv, ad_mv);
  Serial.println(buff);
}

// UTAMA
void setup() {
  // Siapkan serial, tunggu sampai terkoneksi
  Serial.begin(BAUD);
  while (!Serial) {}
  Serial.println("\nAnalog I/O Terkalibrasi");  

  // siapkan INA219
  if (!ina219.begin()) {
    while (1) { delay(100); }
  }  
}

void loop() {
  // Header Plot
  Serial.println("DA  DA(mV) Vi+(mV) AD(mV)");

  // mengeluarkan output ramp 
  for (da_mv=0; da_mv<=3300; da_mv += 50) {
    // keluarkan sinyal ke DA
    da_out = mvToDa(da_mv);
    dacWrite(AO0, da_out);
    delay(10);    // tunggu tunak

    // baca AD
    ad_in = analogRead(DI0);
    ad_mv = adToMv(ad_in);

    // baca INA 
    float shunt_mv = ina219.getShuntVoltage_mV();
    float bus_v = ina219.getBusVoltage_V();    

    // konversi bacaan ina ke tegangan (mV)
    ina_mv = (int) (bus_v*1000 +0.5);
    
    printData();    
  }
  
  // tunggu sampai dikirimi sesuatu dari Serial monitor
  Serial.println("Kirim sembarang huruf untuk ukur lagi");
  while(!Serial.available());
  while(Serial.available()) Serial.read();
}
